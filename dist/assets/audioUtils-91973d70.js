class T{constructor(){this.audioContext=null,this.oscillators=[],this.gainNodes=[],this.isInitialized=!1,this.isPlaying=!1}async initAudioContext(){try{const t=window.AudioContext||window.webkitAudioContext;if(!t)throw new Error("Web Audio API not supported");return this.audioContext=new t,this.audioContext.state==="suspended"&&await this.audioContext.resume(),this.isInitialized=!0,!0}catch(t){return console.error("Failed to initialize audio context:",t),!1}}createBinauralBeats(t=440,e=10,x=.1){if(!this.isInitialized||!this.audioContext)return console.error("Audio context not initialized"),null;try{this.stopAll();const i=this.audioContext.createOscillator(),o=this.audioContext.createGain(),a=this.audioContext.createStereoPanner();i.type="sine",i.frequency.setValueAtTime(t,this.audioContext.currentTime),o.gain.setValueAtTime(x,this.audioContext.currentTime),a.pan.setValueAtTime(-1,this.audioContext.currentTime),i.connect(o),o.connect(a),a.connect(this.audioContext.destination);const n=this.audioContext.createOscillator(),c=this.audioContext.createGain(),l=this.audioContext.createStereoPanner();return n.type="sine",n.frequency.setValueAtTime(t+e,this.audioContext.currentTime),c.gain.setValueAtTime(x,this.audioContext.currentTime),l.pan.setValueAtTime(1,this.audioContext.currentTime),n.connect(c),c.connect(l),l.connect(this.audioContext.destination),this.oscillators=[i,n],this.gainNodes=[o,c],{left:{oscillator:i,gain:o,panner:a},right:{oscillator:n,gain:c,panner:l}}}catch(i){return console.error("Failed to create binaural beats:",i),null}}createMetronome(t=120,e=.3,x="click"){if(!this.isInitialized||!this.audioContext)return console.error("Audio context not initialized"),null;const i=60/t;let o=this.audioContext.currentTime,a=0,n=null;const c=(r=!1)=>{try{const s=this.audioContext.createOscillator(),d=this.audioContext.createGain(),C=this.audioContext.createBiquadFilter();let m,h;switch(x){case"beep":m=r?1e3:800,h=.1,s.type="sine";break;case"wood":m=r?2e3:1500,h=.05,s.type="square",C.type="highpass",C.frequency.setValueAtTime(500,this.audioContext.currentTime);break;default:m=r?1200:1e3,h=.03,s.type="square";break}s.frequency.setValueAtTime(m,this.audioContext.currentTime);const f=r?e*1.5:e;d.gain.setValueAtTime(0,this.audioContext.currentTime),d.gain.linearRampToValueAtTime(f,this.audioContext.currentTime+.01),d.gain.exponentialRampToValueAtTime(.001,this.audioContext.currentTime+h),s.connect(C),C.connect(d),d.connect(this.audioContext.destination),s.start(this.audioContext.currentTime),s.stop(this.audioContext.currentTime+h)}catch(s){console.error("Failed to play beat:",s)}},l=()=>{for(;o<this.audioContext.currentTime+.1;){const r=a%4===0;setTimeout(()=>{c(r)},(o-this.audioContext.currentTime)*1e3),o+=i,a++}};return{start:()=>{o=this.audioContext.currentTime,a=0,n=setInterval(l,25),this.isPlaying=!0},stop:()=>{n&&(clearInterval(n),n=null),this.isPlaying=!1},updateBPM:r=>{t=r,i=60/t}}}updateVolume(t){this.gainNodes.length>0&&this.gainNodes.forEach(e=>{e&&e.gain&&e.gain.setValueAtTime(t,this.audioContext.currentTime)})}updateFrequency(t,e=0){this.oscillators.length>=2?(this.oscillators[0].frequency.setValueAtTime(t,this.audioContext.currentTime),this.oscillators[1].frequency.setValueAtTime(t+e,this.audioContext.currentTime)):this.oscillators.length===1&&this.oscillators[0].frequency.setValueAtTime(t,this.audioContext.currentTime)}start(){this.oscillators.length>0&&(this.oscillators.forEach(t=>{t&&t.start&&t.start()}),this.isPlaying=!0)}stopAll(){try{this.oscillators.forEach(t=>{t&&t.stop&&(t.stop(),t.disconnect())}),this.gainNodes.forEach(t=>{t&&t.disconnect&&t.disconnect()}),this.oscillators=[],this.gainNodes=[],this.isPlaying=!1}catch(t){console.error("Error stopping audio:",t)}}destroy(){this.stopAll(),this.audioContext&&(this.audioContext.close(),this.audioContext=null),this.isInitialized=!1}getState(){return{isInitialized:this.isInitialized,isPlaying:this.isPlaying,contextState:this.audioContext?this.audioContext.state:"closed"}}}const p=new T,g={formatTime(u){const t=Math.floor(u/60),e=Math.floor(u%60);return`${t.toString().padStart(2,"0")}:${e.toString().padStart(2,"0")}`},checkAudioSupport(){return{webAudio:!!(window.AudioContext||window.webkitAudioContext),htmlAudio:!!window.Audio,mediaDevices:!!(navigator.mediaDevices&&navigator.mediaDevices.getUserMedia)}},async requestAudioPermission(){try{const u=window.AudioContext||window.webkitAudioContext,t=new u;return t.state==="suspended"&&await t.resume(),t.close(),!0}catch(u){return console.error("Failed to request audio permission:",u),!1}}};export{p as a,g as b};
