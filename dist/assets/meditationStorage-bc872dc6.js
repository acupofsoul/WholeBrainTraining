const n={USER_PROGRESS:"meditation_user_progress",USER_PREFERENCES:"meditation_user_preferences",SESSION_HISTORY:"meditation_session_history",ACHIEVEMENTS:"meditation_achievements",STATISTICS:"meditation_statistics"},i={volume:.7,soundEnabled:!0,backgroundMusic:!0,animationEnabled:!0,darkMode:!1,visualEffects:!0,defaultSessionDuration:300,reminderEnabled:!0,reminderTime:"20:00",autoSave:!0,preferredBreathingPattern:{inhale:4,hold:4,exhale:4,pause:1},breathingGuideEnabled:!0,preferredFrequency:10,binauralBeatsEnabled:!0,preferredTempo:60,accentBeatEnabled:!0},a={totalSessions:0,totalDuration:0,currentStreak:0,longestStreak:0,lastSessionDate:null,breathing:{sessions:0,duration:0,completedPrograms:[],currentLevel:1},brainwave:{sessions:0,duration:0,usedFrequencies:[],currentLevel:1},metronome:{sessions:0,duration:0,tempoRange:{min:60,max:60},currentLevel:1},visualization:{sessions:0,duration:0,completedScenarios:[],currentLevel:1},mindfulness:{sessions:0,duration:0,completedExercises:[],currentLevel:1}},c={weeklyStats:[],monthlyStats:[],favoriteModules:[],averageSessionDuration:0,moodTracking:[],focusLevels:[]};class S{constructor(){this.isLocalStorageAvailable=this.checkLocalStorageAvailability()}checkLocalStorageAvailability(){try{const e="__localStorage_test__";return localStorage.setItem(e,e),localStorage.removeItem(e),!0}catch{return console.warn("localStorage不可用，将使用内存存储"),!1}}getItem(e,t=null){if(!this.isLocalStorageAvailable)return t;try{const s=localStorage.getItem(e);return s?JSON.parse(s):t}catch(s){return console.error(`获取存储数据失败: ${e}`,s),t}}setItem(e,t){if(!this.isLocalStorageAvailable)return console.warn("localStorage不可用，数据未保存"),!1;try{return localStorage.setItem(e,JSON.stringify(t)),!0}catch(s){return console.error(`保存存储数据失败: ${e}`,s),!1}}removeItem(e){if(!this.isLocalStorageAvailable)return!1;try{return localStorage.removeItem(e),!0}catch(t){return console.error(`删除存储数据失败: ${e}`,t),!1}}clearAll(){Object.values(n).forEach(e=>{this.removeItem(e)})}getPreferences(){const e=this.getItem(n.USER_PREFERENCES,i);return{...i,...e}}savePreferences(e){const s={...this.getPreferences(),...e};return this.setItem(n.USER_PREFERENCES,s)}updatePreference(e,t){const s=this.getPreferences();return s[e]=t,this.savePreferences(s)}getProgress(){const e=this.getItem(n.USER_PROGRESS,a);return{...a,...e}}saveProgress(e){const s={...this.getProgress(),...e};return this.setItem(n.USER_PROGRESS,s)}updateSessionComplete(e,t,s={}){const r=this.getProgress(),o=new Date().toDateString();return r.totalSessions++,r.totalDuration+=t,r.lastSessionDate!==o&&(r.lastSessionDate===new Date(Date.now()-864e5).toDateString()?r.currentStreak++:r.currentStreak=1,r.longestStreak=Math.max(r.longestStreak,r.currentStreak),r.lastSessionDate=o),r[e]&&(r[e].sessions++,r[e].duration+=t,Object.assign(r[e],s)),this.saveProgress(r)}getSessionHistory(e=50){return this.getItem(n.SESSION_HISTORY,[]).slice(-e)}addSessionRecord(e){const t=this.getSessionHistory(),s={id:Date.now(),timestamp:new Date().toISOString(),...e};return t.push(s),t.length>100&&t.splice(0,t.length-100),this.setItem(n.SESSION_HISTORY,t)}getModuleSessionHistory(e,t=20){return this.getSessionHistory().filter(r=>r.module===e).slice(-t)}getAchievements(){return this.getItem(n.ACHIEVEMENTS,[])}unlockAchievement(e){const t=this.getAchievements();return t.find(s=>s.id===e)?!1:(t.push({id:e,unlockedAt:new Date().toISOString()}),this.setItem(n.ACHIEVEMENTS,t),!0)}hasAchievement(e){return this.getAchievements().some(s=>s.id===e)}getStatistics(){const e=this.getItem(n.STATISTICS,c);return{...c,...e}}updateStatistics(e){const s={...this.getStatistics(),...e};return this.setItem(n.STATISTICS,s)}addMoodRecord(e,t=""){const s=this.getStatistics();return s.moodTracking.push({date:new Date().toISOString(),mood:e,notes:t}),s.moodTracking.length>30&&s.moodTracking.splice(0,s.moodTracking.length-30),this.updateStatistics(s)}addFocusRecord(e,t){const s=this.getStatistics();return s.focusLevels.push({date:new Date().toISOString(),level:e,module:t}),s.focusLevels.length>50&&s.focusLevels.splice(0,s.focusLevels.length-50),this.updateStatistics(s)}saveSession(e){const t=this.getSessionHistory();t.push({...e,savedAt:Date.now()}),this.setItem(n.SESSION_HISTORY,t)}updateSession(e){const t=this.getSessionHistory(),s=t.findIndex(r=>r.id===e.id);s!==-1&&(t[s]={...t[s],...e,updatedAt:Date.now()},this.setItem(n.SESSION_HISTORY,t))}exportData(){const e={};return Object.entries(n).forEach(([t,s])=>{e[t]=this.getItem(s)}),e}importData(e){try{return Object.entries(n).forEach(([t,s])=>{e[t]&&this.setItem(s,e[t])}),!0}catch(t){return console.error("导入数据失败:",t),!1}}}const u=new S;export{u as m};
